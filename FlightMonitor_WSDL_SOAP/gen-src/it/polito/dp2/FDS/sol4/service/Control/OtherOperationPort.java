
package it.polito.dp2.FDS.sol4.service.Control;

import java.math.BigInteger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "OtherOperationPort", targetNamespace = "http://www.example.org/FDSControl/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface OtherOperationPort {


    /**
     * 
     * @param aircraft
     * @param flightNumber
     * @param date
     * @return
     *     returns boolean
     * @throws InstanceNotFoundMessage
     * @throws ServiceUnavaibleMessage
     */
    @WebMethod(action = "http://www.example.org/FDSControl/cancelInstance")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "cancelInstance", targetNamespace = "http://www.example.org/FDSControl/", className = "it.polito.dp2.FDS.sol4.service.Control.CancelInstanceType")
    @ResponseWrapper(localName = "cancelInstanceResponse", targetNamespace = "http://www.example.org/FDSControl/", className = "it.polito.dp2.FDS.sol4.service.Control.CancelInstanceResponseType")
    public boolean cancelInstance(
        @WebParam(name = "flightNumber", targetNamespace = "")
        String flightNumber,
        @WebParam(name = "Aircraft", targetNamespace = "")
        String aircraft,
        @WebParam(name = "date", targetNamespace = "")
        XMLGregorianCalendar date)
        throws InstanceNotFoundMessage, ServiceUnavaibleMessage
    ;

    /**
     * 
     * @param aircraft
     * @param delay
     * @param flightNumber
     * @param date
     * @return
     *     returns boolean
     * @throws InstanceNotFoundMessage
     * @throws ServiceUnavaibleMessage
     */
    @WebMethod(operationName = "ChangeDelay", action = "http://www.example.org/FDSControl/ChangeDelay")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "ChangeDelay", targetNamespace = "http://www.example.org/FDSControl/", className = "it.polito.dp2.FDS.sol4.service.Control.ChangeDelayRequestType")
    @ResponseWrapper(localName = "ChangeDelayResponse", targetNamespace = "http://www.example.org/FDSControl/", className = "it.polito.dp2.FDS.sol4.service.Control.ChangeDelayResponseType")
    public boolean changeDelay(
        @WebParam(name = "flightNumber", targetNamespace = "")
        String flightNumber,
        @WebParam(name = "Aircraft", targetNamespace = "")
        String aircraft,
        @WebParam(name = "Date", targetNamespace = "")
        XMLGregorianCalendar date,
        @WebParam(name = "Delay", targetNamespace = "")
        BigInteger delay)
        throws InstanceNotFoundMessage, ServiceUnavaibleMessage
    ;

    /**
     * 
     * @param aircraft
     * @param flightNumber
     * @param date
     * @param gate
     * @return
     *     returns java.lang.String
     * @throws InstanceNotFoundMessage
     * @throws ServiceUnavaibleMessage
     */
    @WebMethod(operationName = "ChangeGate", action = "http://www.example.org/FDSControl/ChangeGate")
    @WebResult(name = "returnValue", targetNamespace = "")
    @RequestWrapper(localName = "ChangeGate", targetNamespace = "http://www.example.org/FDSControl/", className = "it.polito.dp2.FDS.sol4.service.Control.ChangeGateRequestType")
    @ResponseWrapper(localName = "ChangeGateResponse", targetNamespace = "http://www.example.org/FDSControl/", className = "it.polito.dp2.FDS.sol4.service.Control.ChangeGateResponse")
    public String changeGate(
        @WebParam(name = "flightNumber", targetNamespace = "")
        String flightNumber,
        @WebParam(name = "Aircraft", targetNamespace = "")
        String aircraft,
        @WebParam(name = "date", targetNamespace = "")
        XMLGregorianCalendar date,
        @WebParam(name = "gate", targetNamespace = "")
        String gate)
        throws InstanceNotFoundMessage, ServiceUnavaibleMessage
    ;

}
